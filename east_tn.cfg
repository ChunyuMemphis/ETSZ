[pylithapp]

# file only specifies parameters specific to tutorial step16.
# The general parameters are specificed in the pylithapp.cfg
# file which PyLith reads by default.
#
# To run the simulation:
# pylith east_tn.cfg
#
# Output will be directed to the directory output.

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------

[pylithapp.timedependent]
# Set the formulation for finite strain. The default solver will
# automatically be switched to the nonlinear solver.
formulation = pylith.problems.ImplicitLgDeform

#elastic_prestep = False ;
# Set bc to an array of 5 boundary conditions: 'x_pos','x_neg', 'y_pos',
# 'y_neg', and 'z_neg'.
bc = [x_pos,x_neg,y_pos,y_neg,z_neg]
#bc = [x_pos,x_neg,z_neg]
# Set gravity field (default is None)
gravity_field = spatialdata.spatialdb.GravityField

# Set interfaces to an array of 1 fault: 'fault'.
interfaces = [fault]

[pylithapp.timedependent.formulation]

solver = pylith.problems.SolverNonlinear
#split_fields = True
#matrix_type=aij
# Set the output to an array of 2 output managers.
# We will output the solution over the domain and the ground surface.
output = [domain,subdomain]

# Set subdomain component to OutputSolnSubset (subset of domain).
output.subdomain = pylith.meshio.OutputSolnSubset

# Change time stepping algorithm from uniform time step, to adaptive
# time stepping.
time_step = pylith.problems.TimeStepAdapt

# Change the total simulation time to 200 years, and set the maximum time
# step size to 10 years.
[pylithapp.timedependent.formulation.time_step]
total_time = 200.0*year
max_dt = 10.0*year
stability_factor = 1.0 ; use time step equal to stable value from materials

# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
# Change material type of mantle to generalized Maxwell viscoelastic.
#[pylithapp.timedependent]
#materials.mantle = pylith.materials.GenMaxwellIsotropic3D

# Provide a spatial database from which to obtain property values.
# Since there are additional properties and state variables for the
# generalized Maxwell model, we explicitly request that they be output.
# Properties are named in cell_info_fields and state variables are named in
# cell_data_fields.

#[pylithapp.timedependent.materials.mantle]
#db_properties.iohandler.filename = spatialdb/mat_genmaxwell.spatialdb
#output.cell_info_fields = [density,mu,lambda,shear_ratio,maxwell_time]
#output.cell_data_fields = [total_strain,stress,viscous_strain_1,viscous_strain_2,viscous_strain_3]


# ----------------------------------------------------------------------
# initial stresses
# ----------------------------------------------------------------------
# We must specify initial stresses for each material.
# We provide a filename for the spatial database that gives the stresses,
# and we change the query_type from the default 'nearest' to 'linear'.
[pylithapp.timedependent.materials.basement]
db_initial_stress = spatialdata.spatialdb.SimpleGridDB
#db_initial_stress = spatialdata.spatialdb.SimpleDB
db_initial_stress.label = Initial stress in basement
#db_initial_stress.iohandler.filename = spatialdb/initialstress/initial_uniform.spatialdb
db_initial_stress.filename = spatialdb/initialstress/A40mpa.txt
#db_initial_stress.iohandler.filename = spatialdb/initialstress/A.txt
output.cell_info_fields = [density,mu,lambda]
output.cell_data_fields = [total_strain,stress]
db_initial_stress.query_type = linear

[pylithapp.timedependent.materials.mantle]
db_initial_stress = spatialdata.spatialdb.SimpleGridDB
#db_initial_stress = spatialdata.spatialdb.SimpleDB
db_initial_stress.label = Initial stress in mantle
#db_initial_stress.iohandler.filename = spatialdb/initialstress/initial_uniform.spatialdb
db_initial_stress.filename = spatialdb/initialstress/A40mpa.txt
#db_initial_stress.iohandler.filename = spatialdb/initialstress/A.txt
output.cell_info_fields = [density,mu,lambda]
output.cell_data_fields = [total_strain,stress]
db_initial_stress.query_type = linear
[pylithapp.timedependent.materials.low]
db_initial_stress = spatialdata.spatialdb.SimpleGridDB
db_initial_stress.label = Initial stress in low_density
db_initial_stress.filename = spatialdb/initialstress/A40mpa.txt
output.cell_info_fields = [density,mu,lambda]
output.cell_data_fields = [total_strain,stress]
db_initial_stress.query_type = linear
# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.timedependent.interfaces]
# Change fault to dynamic fault interface.
fault = pylith.faults.FaultCohesiveDyn

[pylithapp.timedependent.interfaces.fault]
# The label corresponds to the name of the nodeset in CUBIT.
label = fault
edge = fault_edge

#up_dir = [1,0,1]
# Apply tractions to fault surface even when it is open.
open_free_surface = False

# Use the static friction model.
friction = pylith.friction.StaticFriction
friction.label = Static friction

# We must define the quadrature information for fault cells.
# The fault cells are 2D (surface).
quadrature.cell = pylith.feassemble.FIATSimplex
quadrature.cell.dimension = 2

# Set static friction model parameters using a uniform DB. Set the
# static coefficient of friction to 0.6 and cohesion to 0.0 Pa.
#friction.db_properties = spatialdata.spatialdb.UniformDB
#friction.db_properties.label = Static friction
#friction.db_properties.values = [friction-coefficient,cohesion]
#friction.db_properties.query_type = linear
#friction.db_properties.data = [0.4,0*MPa]


friction.db_properties = spatialdata.spatialdb.SimpleDB
friction.db_properties.label = Static friction
friction.db_properties.iohandler.filename = spatialdb/faultcoefficient.spatialdb
friction.db_properties.query_type = linear

# Output direction information for debugging fault problems.
output.vertex_info_fields = [normal_dir,strike_dir,dip_dir,friction_coefficient,cohesion]
output.vertex_data_fields = [slip, traction]
[pylithapp.problem.interfaces.fault]
zero_tolerance = 1.0e-8
# boundary conditions
# ----------------------------------------------------------------------
# We use the default ZeroDispDB for all boundaries, since we just want
# zero displacements in the direction normal to each face.

# The label corresponds to the name of the nodeset in CUBIT.

[pylithapp.timedependent.bc.x_pos]
bc_dof = [0]
label = face_xpos
db_initial.label = Dirichlet BC on +x
#db_initial = spatialdata.spatialdb.SimpleDB
#db_initial.iohandler.filename = spatialdb/fixeddisp_axial_shear.spatialdb

[pylithapp.timedependent.bc.x_neg]
bc_dof = [0]
label = face_xneg
#db_initial = spatialdata.spatialdb.SimpleDB
db_initial.label = Dirichlet BC on -x
#db_initial.iohandler.filename = spatialdb/fixeddisp_axial_shear.spatialdb

[pylithapp.timedependent.bc.y_pos]
bc_dof = [1]
label = face_ypos
db_initial.label = Dirichlet BC on +y
#db_initial = spatialdata.spatialdb.SimpleDB
#db_initial.iohandler.filename = spatialdb/fixeddisp_axial_shear.spatialdb

[pylithapp.timedependent.bc.y_neg]
bc_dof = [1]
label = face_yneg
db_initial.label = Dirichlet BC on -y
#db_initial = spatialdata.spatialdb.SimpleDB
#db_initial.iohandler.filename = spatialdb/fixeddisp_axial_shear.spatialdb

#[pylithapp.timedependent.bc.z_pos]
#bc_dof = [2]
#label = face_zpos_nofault
#db_initial.label = Dirichlet BC on +z

[pylithapp.timedependent.bc.z_neg]
bc_dof = [2]
label = face_zneg
db_initial.label = Dirichlet BC on -z

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
# Give basename for VTK domain output of solution over domain.
[pylithapp.problem.formulation.output.domain]
# We specify that output occurs in terms of a given time frequency, and
# ask for output every 40 years. The time stamps of the output files are
# in years (rather than the default of seconds), and we give a format for
# the time stamp.
output_freq = time_step
time_step = 40.0*year
writer.filename = output/east_tn_uniform.vtk
writer.time_format = %04.0f
writer.time_constant = 1.0*year


# Give basename for VTK domain output of solution over ground surface.
[pylithapp.problem.formulation.output.subdomain]
# Name of nodeset for ground surface.
label = face_zpos
# We keep the default output frequency behavior (skip every n steps), and
# ask to skip 0 steps between output, so that we get output every time step.
skip = 0
writer.filename = output/east_tn-groundsurf_uniform.vtk
writer.time_format = %04.0f
writer.time_constant = 1.0*year

# Give basename for VTK output of upper_crust state variables.
[pylithapp.timedependent.materials.basement.output]
# Average values over quadrature points.
cell_filter = pylith.meshio.CellFilterAvg
output_freq = time_step
time_step = 40.0*year
writer.filename = output/east_tn-basement_uniform.vtk
writer.time_format = %04.0f
writer.time_constant = 1.0*year

# Give basename for VTK fault output.
[pylithapp.problem.interfaces.fault.output]
writer.filename = output/east_tn-fault.vtk
writer.time_format = %04.0f
writer.time_constant = 1.0*year

# Give basename for VTK output of lower_crust state variables.
[pylithapp.timedependent.materials.mantle.output]
# Average values over quadrature points.
cell_filter = pylith.meshio.CellFilterAvg
output_freq = time_step
time_step = 40.0*year
writer.filename = output/east_tn-mantle_uniform.vtk
writer.time_format = %04.0f
writer.time_constant = 1.0*year
[pylithapp.timedependent.materials.low.output]
cell_filter = pylith.meshio.CellFilterAvg
output_freq = time_step
time_step = 40.0*year
writer.filename = output/east_tn-low_uniform.vtk
writer.time_format = %04.0f
writer.time_constant = 1.0*year


